
//添加记录
java

//修复部分手机ui::scrollView 花屏
AppActivity.java


	package org.cocos2dx.cpp;

	import org.cocos2dx.lib.Cocos2dxActivity;
	import org.cocos2dx.lib.Cocos2dxGLSurfaceView;

	public class AppActivity extends Cocos2dxActivity {
	

		public Cocos2dxGLSurfaceView onCreateView() {
			Cocos2dxGLSurfaceView glSurfaceView = new 	Cocos2dxGLSurfaceView(this);
			glSurfaceView.setEGLConfigChooser(5, 6, 5, 0, 16, 8);
		
			return glSurfaceView;
		}  
	}



cocos2dx(C++)

widget.h

public:
	//按钮变灰功能实现，灰色渐出功能实现
	void setGrey(TextureResType texType = UI_TEX_TYPE_PLIST);

	void removeGrey();
	
	void greyFadeOut(float dt);    
	
	void loadGreyTexture(TextureResType texType = UI_TEX_TYPE_PLIST);
	
	bool _isgrey;
	
	CC_SYNTHESIZE(std::string,_frameName,FrameName); 


	//Widget设置触摸优先级
public:

	void setTouchPriority(int priority);

	int  getTouchPriority();

	int _touchPriority;

	void removeTouchEventListener();

widget.cpp
	//灰色精灵实现
	template <class spriteType>

	class ShaderSpriteCreator
{
		
public:
	static spriteType* createSprite(const std::string& filename)
	{
		spriteType* ret = spriteType::create();
		ret->setTexture(filename);
		ret->initShader();
		ret->setBackgroundNotification();
		return ret;
	};
	static spriteType* createWithSpriteFrameNameT(const std::string& framename)
	{
		spriteType* ret = spriteType::createWithSpriteFrameName(framename);
		ret->initShader();
		ret->setBackgroundNotification();
		return ret;
	}
};

class ShaderSprite : public Sprite
{
public:
	ShaderSprite();
	~ShaderSprite();

	virtual void initShader();
	void setBackgroundNotification();

	virtual void draw(Renderer *renderer, const kmMat4 &transform, bool transformUpdated) override;
	void listenBackToForeground(Ref *obj);

protected:
	virtual void buildCustomUniforms() = 0;
	virtual void setCustomUniforms() = 0;
protected:
	std::string _fragSourceFile;

protected:
	CustomCommand _renderCommand;
	void onDraw(const kmMat4 &transform, bool transformUpdated);

};

ShaderSprite::ShaderSprite()
{
}

ShaderSprite::~ShaderSprite()
{
}

void ShaderSprite::setBackgroundNotification()
{
#if CC_ENABLE_CACHE_TEXTURE_DATA
	auto listener = EventListenerCustom::create(EVENT_COME_TO_FOREGROUND, [this](EventCustom* event){
		this->setShaderProgram(nullptr);
		this->initShader();
	});
	_eventDispatcher->addEventListenerWithSceneGraphPriority(listener, this);
#endif
}

void ShaderSprite::initShader()
{
	GLchar * fragSource = (GLchar*) String::createWithContentsOfFile(
		FileUtils::getInstance()->fullPathForFilename(_fragSourceFile).c_str())->getCString();
	auto program = new GLProgram();
	program->initWithByteArrays(ccPositionTextureColor_vert, fragSource);
	setShaderProgram(program);
	program->release();

	CHECK_GL_ERROR_DEBUG();

	program->bindAttribLocation(GLProgram::ATTRIBUTE_NAME_POSITION, GLProgram::VERTEX_ATTRIB_POSITION);
	program->bindAttribLocation(GLProgram::ATTRIBUTE_NAME_COLOR, GLProgram::VERTEX_ATTRIB_COLOR);
	program->bindAttribLocation(GLProgram::ATTRIBUTE_NAME_TEX_COORD, GLProgram::VERTEX_ATTRIB_TEX_COORDS);

	CHECK_GL_ERROR_DEBUG();

	program->link();

	CHECK_GL_ERROR_DEBUG();

	program->updateUniforms();

	CHECK_GL_ERROR_DEBUG();

	buildCustomUniforms();

	CHECK_GL_ERROR_DEBUG();
}

void ShaderSprite::draw(Renderer *renderer, const kmMat4 &transform, bool transformUpdated)
{
	_renderCommand.init(_globalZOrder);
	_renderCommand.func = CC_CALLBACK_0(ShaderSprite::onDraw, this, transform, transformUpdated);
	renderer->addCommand(&_renderCommand);

}

void ShaderSprite::onDraw(const kmMat4 &transform, bool transformUpdated)
{
	auto shader = getShaderProgram();
	shader->use();
	shader->setUniformsForBuiltins(transform);

	setCustomUniforms();

	GL::enableVertexAttribs(cocos2d::GL::VERTEX_ATTRIB_FLAG_POS_COLOR_TEX );
	GL::blendFunc(_blendFunc.src, _blendFunc.dst);
	GL::bindTexture2D( getTexture()->getName());

	//
	// Attributes
	//
#define kQuadSize sizeof(_quad.bl)
	size_t offset = (size_t)&_quad;

	// vertex
	int diff = offsetof( V3F_C4B_T2F, vertices);
	glVertexAttribPointer(GLProgram::VERTEX_ATTRIB_POSITION, 3, GL_FLOAT, GL_FALSE, kQuadSize, (void*) (offset + diff));

	// texCoods
	diff = offsetof( V3F_C4B_T2F, texCoords);
	glVertexAttribPointer(GLProgram::VERTEX_ATTRIB_TEX_COORDS, 2, GL_FLOAT, GL_FALSE, kQuadSize, (void*)(offset + diff));

	// color
	diff = offsetof( V3F_C4B_T2F, colors);
	glVertexAttribPointer(GLProgram::VERTEX_ATTRIB_COLOR, 4, GL_UNSIGNED_BYTE, GL_TRUE, kQuadSize, (void*)(offset + diff));

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
	CC_INCREMENT_GL_DRAWN_BATCHES_AND_VERTICES(1, 4);
}


class GreySprite : public ShaderSprite, public ShaderSpriteCreator<GreySprite>
{
public:
	CREATE_FUNC(GreySprite);
	static GreySprite* createWithSpriteFrameName(const std::string &frameName);
	static GreySprite* createWithSpriteFrame(SpriteFrame *spriteFrame);

	GreySprite();
protected:
	virtual void buildCustomUniforms();
	virtual void setCustomUniforms();
};

GreySprite::GreySprite()
{
	_fragSourceFile = "Shaders/example_greyScale.fsh";
}

GreySprite* GreySprite::createWithSpriteFrameName(const std::string &frameName)
{
	SpriteFrame *frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(frameName);

#if COCOS2D_DEBUG > 0
	char msg[256] = {0};
	sprintf(msg, "Invalid spriteFrameName: %s", frameName.c_str());
	CCASSERT(frame != nullptr, msg);
#endif

	return createWithSpriteFrame(frame);
}

GreySprite* GreySprite::createWithSpriteFrame(SpriteFrame *spriteFrame)
{
	GreySprite *sprite = new GreySprite();
	if (spriteFrame && sprite && sprite->initWithSpriteFrame(spriteFrame))
	{
		sprite->autorelease();
		return sprite;
	}
	CC_SAFE_DELETE(sprite);
	return nullptr;
}

void GreySprite::buildCustomUniforms()
{

}

void GreySprite::setCustomUniforms()
{

}




ImageView.h
	void loadHalfTexture(const std::string& fileName,TextureResType texType = UI_TEX_TYPE_PLIST);

ImageView.cpp

	void ImageView::loadHalfTexture(const std::string& fileName,TextureResType texType)
{
	if (fileName.empty())
	{
		return;
	}
	_textureFile = fileName;
	_imageTexType = texType;
	switch (_imageTexType)
	{
	case UI_TEX_TYPE_LOCAL:
		if (_scale9Enabled)
		{
			extension::Scale9Sprite* imageRendererScale9 = STATIC_CAST_SCALE9SPRITE;
			imageRendererScale9->initWithFile(fileName);
			imageRendererScale9->setCapInsets(_capInsets);
		}
		else
		{
			Sprite* imageRenderer = STATIC_CAST_CCSPRITE;
			imageRenderer->setTexture(fileName);

			Rect _rect = imageRenderer->getTextureRect();
			imageRenderer->setTextureRect(Rect(_rect.origin.x,_rect.origin.y,_rect.size.width,_rect.size.height*3/4));
		}
		break;
	case UI_TEX_TYPE_PLIST:
		if (_scale9Enabled)
		{
			extension::Scale9Sprite* imageRendererScale9 = STATIC_CAST_SCALE9SPRITE;
			imageRendererScale9->initWithSpriteFrameName(fileName);
			imageRendererScale9->setCapInsets(_capInsets);
		}
		else
		{
			Sprite* imageRenderer = STATIC_CAST_CCSPRITE;
			imageRenderer->setSpriteFrame(fileName);

			Rect _rect = imageRenderer->getTextureRect();
			imageRenderer->setTextureRect(Rect(_rect.origin.x,_rect.origin.y,_rect.size.width,_rect.size.height*3/4));
		}
		break;
	default:
		break;
	}

	_imageTextureSize = _imageRenderer->getContentSize();
	updateFlippedX();
	updateFlippedY();
	updateRGBAToRenderer(_imageRenderer);
	updateContentSizeWithTextureSize(_imageTextureSize);
	_imageRendererAdaptDirty = true;

	setFrameName(_textureFile);
	setResType(texType);
	if (_isgrey){
		loadGreyTexture();
	}
}



